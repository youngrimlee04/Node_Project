#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mini-wallet:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// 사설 네트워크 구성
const web3 = require ('web3')
const rpc = new web3 (new web3.providers.HttpProvider('http://localhost:8123'))

// 서버 소켓 생성
const io = require('socket.io')(server)
io.on('connection', (socket)=>{
  console.log('클라이언트 접속 완료')
  // 클라이언트가 접속하면 모든 계좌 리스트 보내기 (admin 관점에서)
  // 실제 서비스라면 해당 클라이언트에 해당 되는 계좌만 보냄
  socket.on('s_send_allAccounts', ()=>{
   // 계좌 정보 획득 및 잔액 조회 후 응답 데이터 구성
  let results = []
  let accounts = rpc.eth.accounts
  for( idx in accounts){
    let name = 'Account-'+ (idx+1) // 계좌 별칭
    let id = accounts[ idx ] // 계좌 주소(Hash 값)
    let coin = rpc.fromWei(rpc.eth.getBalance( id ) , 'ether' ) // 잔액
    let tmp = {
      name: name,
      id:id,
      coin:coin
    }
    // 응답 데이터 그릇에 추가
    results.push(tmp)
  }
    socket.emit('c_send_allAccounts', results )

  })

})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
