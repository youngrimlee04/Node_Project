#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mini-vote:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// 사설 네트워크 구성
const web3 = require('web3')
const rpc  = new web3( new web3.providers.HttpProvider('http://localhost:8123') )
// 컨트렉트 연결
const conInterface = [ { "constant": true, "inputs": [ { "name": "id", "type": "uint8" } ], "name": "getCandidateName", "outputs": [ { "name": "", "type": "string", "value": "에어부산" } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0x41ccb260" }, { "constant": false, "inputs": [ { "name": "name", "type": "string" } ], "name": "addCandidate", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function", "signature": "0x462e91ec" }, { "constant": true, "inputs": [], "name": "dupVote", "outputs": [ { "name": "", "type": "bool", "value": false } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0xecc76d4b" }, { "constant": true, "inputs": [], "name": "getNumOfCandidate", "outputs": [ { "name": "", "type": "uint8", "value": "2" } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0xf4fc4b1f" }, { "constant": false, "inputs": [ { "name": "name", "type": "string" } ], "name": "vote", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function", "signature": "0xfc36e15b" }, { "constant": true, "inputs": [ { "name": "name", "type": "string" } ], "name": "getScoreOfCandidate", "outputs": [ { "name": "", "type": "uint256", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0xfd090896" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor", "signature": "constructor" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "msg", "type": "string" } ], "name": "sendMsg", "type": "event", "signature": "0x9e024820befa21e718899c73d1a2becabd2ed45d91807efb23f5a7afef64533b" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "state", "type": "bool" } ], "name": "regiSuccess", "type": "event", "signature": "0xdadbf2ea1fe6dc4fe679073343f565bc04c7af4bad73419ae475d6a98bed2a11" } ]
const conAddress   = '0x44b17410B872E0Cd61692711347A3e29EA421B8C'
const contract     = rpc.eth.contract( conInterface ).at( conAddress )

console.log( '후보자의 총수', contract.getNumOfCandidate() )
// 컨트렉트 이벤트 처리
const event = contract.sendMsg()

// 서버 소켓 생성
const io   = require('socket.io')(server)
io.on('connection', (socket)=>{
  
  // 이벤트 감지
  event.watch( (err, msg)=>{  
    socket.emit('c_send_error','이미 투표를 했습니다')
      } )


  // 계좌 정보 획득및 잔액 조회후 응답 데이터 구성   
  socket.on('s_send_allAccounts', ()=>{     
    console.log( '계좌정보 요청이 들어왔다' ) 
    let results = []    
    let accounts = rpc.eth.accounts    
    for( idx in accounts ){
      let name = 'Account-' + (parseInt(idx)+1)
      let id   = accounts[ idx ]     
      let coin = rpc.fromWei( rpc.eth.getBalance( id ), 'ether' )      
      let tmp  = {
        name:name,
        id:id,
        coin:coin
      }
      results.push( tmp )
    }     
    socket.emit( 'c_send_allAccounts', results )
  })

  // 후보자 등록
  socket.on('s_send_addCandidate', (account, coin, name, pwd)=>{
    // 사용자의 잔액에서 gas 비용을 뺀것이 0보다 작으면 => 돈이 부족하면, 불가
    const gas   = 2000000 // wei 단위
    // 현재 사용자의 잔고는 ether이므로, ether를 wei로 변경하여 비교해야한다 
    const myWei = rpc.toWei( coin, 'ether')
    console.log( myWei )
    if( myWei - gas < 0 ){
      socket.emit('c_send_error', '잔액 부족')
      return
    }
    // 트렌젝션 발생(상태변수를 수정하는 작업을 진행하면)=>gas 지급=>계좌언락
    try {
      if( rpc.personal.unlockAccount(account, pwd) ){
        const transaction = {
          from:account,
          gas:gas          
        }
        // 원래 함수의 인자를 모두 채우면, 그 다음부터 트렌젝션, 
        contract.addCandidate( name, transaction, (err, suc)=>{
          socket.emit('c_send_error', err ? err : `등록성공, 잠시후에 확인하세요:${suc}`)
        } )
      }
    } catch (error) {
      console.log(error)
      socket.emit('c_send_error', '비밀번호 오류, 다시 확인해서 시도하세요')
    }


  })

  // 후보자 명단 및 득표수 등 정보를 보낸다
  socket.on('s_send_candidateInfo', ()=>{
    let nums = parseInt(contract.getNumOfCandidate())
    // console.log( nums )
    let results = []
    for(let i=0; i<nums; i++){
      let name = contract.getCandidateName( i ) // 후보 이름
      let info = {
        name:name, 
        score:contract.getScoreOfCandidate(name)// 후보자별 득표수
      }
      // 후보자 1개 데이터를 배열에 담는다
      results.push( info )
    }
    // console.log( results )
    // 클라이언트로 보낸다
    socket.emit('c_send_candidateInfo', results)
  })
       
  // 투표
  socket.on('s_send_vote', (account, candidate)=>{
    // 투표 계좌 지정
    rpc.eth.defaultAccount = account
    console.log( contract.dupVote())
    if(contract.dupVote()){
      socket.emit('c_send_error','이미 투표를 했습니다')
    } else{
      // 공간을 차지하는 작업은 아니므로 gas 지급 안함
      // 그러나 값을 바꾸는 것 자체는 트렌젝션이므로 트렌젝션 처리는 수행됨
      if( rpc.personal.unlockAccount(account, '1234') ){ //pwd 자리에 '1234'
        const transaction = {
          from:account,
          gas:2000000          
        }
        contract.vote(candidate, transaction, (err, result)=>{
          socket.emit('c_send_error', `투표 완료 :${result}`)
      })
    }
  }
  })

})




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
