#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mini-vote:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// 사설 네트워크 구성
const web3 = require ('web3')
const rpc = new web3 (new web3.providers.HttpProvider('http://localhost:8123'))
// 컨트랙트 연결
const conInterface = [ { "constant": true, "inputs": [ { "name": "id", "type": "uint8" } ], "name": "getCandidateName", "outputs": [ { "name": "", "type": "string", "value": "" } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0x41ccb260" }, { "constant": false, "inputs": [ { "name": "name", "type": "string" } ], "name": "addCandidate", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function", "signature": "0x462e91ec" }, { "constant": true, "inputs": [], "name": "dupVote", "outputs": [ { "name": "", "type": "bool", "value": false } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0xecc76d4b" }, { "constant": true, "inputs": [], "name": "getNumOfCandidate", "outputs": [ { "name": "", "type": "uint8", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0xf4fc4b1f" }, { "constant": false, "inputs": [ { "name": "name", "type": "string" } ], "name": "vote", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function", "signature": "0xfc36e15b" }, { "constant": true, "inputs": [ { "name": "name", "type": "string" } ], "name": "getScoreOfCandidate", "outputs": [ { "name": "", "type": "uint256", "value": "0" } ], "payable": false, "stateMutability": "view", "type": "function", "signature": "0xfd090896" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor", "signature": "constructor" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "msg", "type": "string" } ], "name": "sendMsg", "type": "event", "signature": "0x9e024820befa21e718899c73d1a2becabd2ed45d91807efb23f5a7afef64533b" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "state", "type": "bool" } ], "name": "regiSuccess", "type": "event", "signature": "0xdadbf2ea1fe6dc4fe679073343f565bc04c7af4bad73419ae475d6a98bed2a11" } ]
// mist에서 컨트랙트 JSON 인터페이스 복사 해서 conInterface에 복붙
const conAddress = '0x44b17410B872E0Cd61692711347A3e29EA421B8C' // Mist에서 아까 생성한 컨트랙트 우측 "주소복사"
const contract = rpc.eth.contract( conInterface ).at( conAddress )

console.log ('후보자의 총수', contract.getNumOfCandidate())

// 컨트랙트 이벤트 처리
const event = contract.sendMsg()
// 이벤트 감지
event.watch( (err, msg)=>{
  alert( err? err: msg)
})

// 서버 소켓 생성
const io = require('socket.io')(server)
io.on('connection', (socket)=>{
  socket.on('s_send_allAccounts', ()=>{

    // 계좌 정보 획득 및 잔액 조회 후 응답 데이터 구성
   let results = []
   let accounts = rpc.eth.accounts
   for( idx in accounts){
     let name = 'Account-'+ (parseInt(idx+1)) // 계좌 별칭
     let id = accounts[ idx ] // 계좌 주소(Hash 값)
     let coin = rpc.fromWei(rpc.eth.getBalance( id ) , 'ether' ) // 잔액
     let tmp = {
       name: name,
       id:id,
       coin:coin
     }
     // 응답 데이터 그릇에 추가
     results.push(tmp)
   }
     socket.emit('c_send_allAccounts', results )
 
   })
 
   //후보자 등록
   socket.on('s_send_addCandidate',( account, coin, name, pwd )=>{
    // 사용자의 잔액 - gas 비용 <0 트랜잭션 발생 불가
    const gas = 2000000 // wei 단위
    // 현재 사용자의 잔고는 ether이므로 ether를 wei로 변경하여 비교
    const myWei = rpc.toWei (coin, 'ether')
    console.log( myWei )
    if(myWei - gas < 0){
      socket.emit('c_send_error','잔액 부족')
      return
    }
// 트랜잭션 발생(상태변수를 수정하는 작업 진행 시 ) -> gas 지급 -> 계좌 Unlock 
try {
  if( rpc.personal.unlockAccount(account, pwd)){
      const transaction = {
        from: account,
        gas:gas
      }
      // 원래 함수의 인자를 모두 채우면 이후 트랜젝션
      contract.addCandidate( name, transaction, (err, suc)=>{
        socket.emit('c_send_error', err ? err : `등록 성공, 잠시 후 확인하세요:${suc}`)
      } )
  }  
    } catch (error) {
      socket.emit('c_send_error','비밀번호 오류, 다시 확인해서 시도하세요')
}

   })
   
   // 후보자 명단 및 득표수 등 정보를 보낸다
   socket.on('s_send_candidateInfo', ()=>{
     let nums = parseInt(contract.getNumOfCandidate())
     //console.log (nums) // 내가 등록한 후보자 명단 수 콘솔에 뜸
     let results = []
     for(let i =0; i<nums; i++){
       let name = contract.getCandidateName(i)
       let info = {
        name, // 후보 이름
        score: contract.getScoreOfCandidate(name) // 후보자별 득표수

       }
       // 후보자 1개 데이터를 배열에 담기
       results.push(info) // 배열 데이터 추가는 push
     }
    // console.log(results) 각 후보자들의 득표수 등 밑에 콘솔에 찍기
   })


 })

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
