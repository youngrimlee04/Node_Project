// 함수 
// 반복 작업 시 사용, 복잡한 루틴을 하나로 묶을 때 단위로 호출하여 사용
// 함수, 메서드 => Call by Value 특징
// 규칙 1. 표준 함수 2. 익명 함수 
// 표준 함수 function : 이 함수만 정의된 위치에 관계 없이 선행 되어 사용 가능
// function add(x,y) {
//     return x+y
// }
// console.log(add(1,2))

// 익명 함수(이름이 없어도 구동되는 형태에서 사용) > 콜백 함수 형태로 사용됨
// 변수값에 함수를 넣으면 이름이 생겨서 호출할 수 있음
// let add2 = function(x,y){
//     return x+y
// } 
// console.log(add2(2,2))

// 형태 : 클로저 => 함수 안에 함수가 정의되어 있음
// 형태 : 콜백함수 => 비동기적 상황에서 사용 > 콜백함수 이해하면 node의 50%는 끝났다.
// 비동기적 작업 : 디비쿼리, 파일 읽고 쓰기, 네트워크 등 I/O 작업
// function callDB(param, cb){
//     // 비동기 작업이 진행됐고 그 결과를 돌려주겠다, 밑에서 cb는 함수고 param은 수치
//     cb(param+1)
//      }
//      callDB(100, function(data){
//          console.log('돌려받은 데이터->', data)
//      } )

// 모던 스크립트에서 익명 함수를 간략하게 표현하는 애로우 함수(화살표 함수) 추가
// 1. function 제거
// 2. 파라미터가 1개면 () 제거, 단 파라미터가 없으면 ()만 둔다.
// 3. => 추가
// 4. 수행문 : statement가 1개면 {} 생략 가능 
let add3 = (x,y) => x+y
console.log(add3(100,101))